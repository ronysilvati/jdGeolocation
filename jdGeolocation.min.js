/**
 * Created by Desenvolvimento Web1 on 22/09/2016.
 * Módulo responsável pelo tratamento de geolocalização
 *
 * ***************************************************************************
 * Desenvolver: Rony Silva
 * Email: ronysilvati@live.com
 * ***************************************************************************
 * ===========================================================================
 * Dependências
 * ===========================================================================
 * Jquery
 * Maps
 * jdAddressByGoogle
 * ===========================================================================
 */

var jdGeolocation   = function(){
    var functionName                = 'jdGeolocation';
    var version                     = '0.0.1';
    var googleMapsKey               = 'YOUR_KEY';
    var urlGoogleMapsFromLatLng     = 'https://maps.googleapis.com/maps/api/geocode/json?region=br&key='+googleMapsKey+'&latlng=';
    var urlGoogleMapsFromAddress    = 'https://maps.googleapis.com/maps/api/geocode/json?region=br&address=';
    var urlFindMyAddressFromIp      = 'https://ipinfo.io/json';
    var urlGoogleDistance           = 'https://maps.googleapis.com/maps/api/distancematrix/json?key='+googleMapsKey;

    return {
        getPosition: function(callback){
            var informationsPosition    = {
                lat:null,
                lng:null
            };

            try{
                if(navigator.geolocation){
                    navigator.geolocation.getCurrentPosition(function(success){
                        informationsPosition.lat = success.coords.latitude;
                        informationsPosition.lng = success.coords.longitude;
                        callback(informationsPosition);
                    },function(error){
                        callback(informationsPosition);
                    },{
                        maximumAge:60000,
                        timeout:5000,
                        enableHighAccuracy:true
                    });
                }
                else{
                    callback(informationsPosition);
                }
            }
            catch(err){
                console.log(functionName+': '+err.message);
            }
        },
        permissionIsOk: function(callback){
            try{
                if(navigator.geolocation){
                    navigator.geolocation.getCurrentPosition(function(success){
                        callback(true);
                    },function(error){
                        callback(false);
                    },{
                        maximumAge:60000,
                        timeout:5000,
                        enableHighAccuracy:true
                    });
                }
                else{
                    callback(false);
                }
            }
            catch(err){
                console.log(functionName+': '+err.message);
            }
        },
        getMyGeneralPosition: function(callback){
            var informationsPosition    = {
                lat:null,
                lng:null
            };

            try{
                if(typeof callback == 'function'){
                    $.ajax({
                        url : urlFindMyAddressFromIp,
                        success : function(response){

                            if('loc' in response){
                                var positions   = response.loc.split(',');

                                if(positions.length === 2){
                                    informationsPosition   = {
                                        lat: positions[0],
                                        lng: positions[1]
                                    };

                                    callback(informationsPosition);
                                    return false;
                                }
                            }

                            callback(informationsPosition);
                            return false;
                        },
                        error: function(){
                            callback(informationsPosition);
                            return false;
                        }
                    });
                }
            }
            catch(err){
                console.log(functionName+': '+err.message);
            }

        },
        getAddressByLatLng: function(lat,lng,callback){
            try{
                if(lat && lng && typeof callback == 'function'){
                    $.ajax({
                        url : urlGoogleMapsFromLatLng+lat+','+lng,
                        success : function(response){

                            if( response.results.length > 0 ){
                                $.each(response.results, function(k,addr){

                                    var addressFormatted = jdAddressByGoogle().getAddressFormatted(addr);


                                    addressFormatted.originalPosition   = {
                                        lat: lat,
                                        lng: lng
                                    };

                                    callback(addressFormatted);
                                    return false;
                                });

                            }
                            else{
                                callback(null);
                                return false;
                            }
                        }
                    });
                }
            }
            catch(err){
                console.log(functionName+': '+err.message);
            }
        },
        getAllAddressesByLatLng: function(lat,lng,callback){
            try{
                if(lat && lng && typeof callback == 'function'){
                    $.ajax({
                        url : urlGoogleMapsFromLatLng+lat+','+lng,
                        success : function(response){

                            if( response.results.length > 0 ){
                                callback(response.results);
                                return false;

                            }
                            else{
                                callback([]);
                                return false;
                            }
                        }
                    });
                }
            }
            catch(err){
                console.log(functionName+': '+err.message);
            }
        },
        getAddressByLogradouro: function(address,number,callback){
            try{
                if(address && typeof callback == 'function'){
                    var address = (!number || (number.toString().toUpperCase().indexOf(number)) === false)? address : address+', '+number;


                    $.ajax({
                        url : urlGoogleMapsFromAddress+address,
                        success : function(response){

                            if( response.results.length > 0 ){
                                $.each(response.results, function(k,addr){
                                    var addressFormatted = jdAddressByGoogle().getAddressFormatted(addr);

                                    try{
                                        addressFormatted.originalPosition   = {
                                            lat: addr.geometry.location.lat,
                                            lng: addr.geometry.location.lng
                                        };
                                    }
                                    catch(err){
                                        console.log("ERRO: " + err.message);
                                    }

                                    callback(addressFormatted);
                                    return false;
                                });

                            }
                            else{
                                callback(jdAddressByGoogle().getAddressFormatted(null));
                                return false;
                            }
                        }
                    });
                }
            }
            catch(err){
                console.log(functionName+': '+err.message);
                callback(jdAddressByGoogle().getAddressFormatted(null));
                return false;
            }
        },
        getAllAddressesByLogradouro: function(address,params,callback){
            try{
                if(address && typeof callback == 'function'){
                    var address = address;
                    var urlSearch = urlGoogleMapsFromAddress+address;

                    if(params){
                        if(typeof params == 'object'){
                            if('bounds' in params && params.bounds){
                                urlSearch += '&bounds='+params.bounds;
                            }
                        }
                    }

                    $.ajax({
                        url : urlSearch,
                        success : function(response){

                            if( response.results.length > 0 ){
                                callback(response.results);
                                return false;

                            }
                            else{
                                callback([]);
                                return false;
                            }
                        }
                    });
                }
            }
            catch(err){
                console.log(functionName+': '+err.message);
            }
        },
        getViewPortByLatLng: function(lat,lng,callback){
            try{
                if(lat && lng && typeof callback == 'function'){
                    $.ajax({
                        url : urlGoogleMapsFromLatLng+lat+','+lng,
                        success : function(response){

                            if( response.results.length > 0 ){
                                $.each(response.results, function(k,addr){
                                    callback(addr.geometry.viewport);
                                    return false;
                                });

                            }
                            else{
                                callback(null);
                                return false;
                            }
                        }
                    });
                }
            }
            catch(err){
                console.log(functionName+': '+err.message);
            }
        },
        getDistance: function(origins,destinations,callback){

            var distanceInfs    = {
                distancia: 0,
                tempo:0
            }

            try{
                if((origins.length > 0) && (destinations.length > 0)){

                    var distanceService = new google.maps.DistanceMatrixService();

                    distanceService.getDistanceMatrix({
                            origins: origins,
                            destinations: destinations,
                            travelMode: google.maps.TravelMode.DRIVING,
                            unitSystem: google.maps.UnitSystem.METRIC,
                            durationInTraffic: true,
                            avoidHighways: false,
                            avoidTolls: false
                        },
                        function (response, status) {
                            console.log(response);
                            if (status !== google.maps.DistanceMatrixStatus.OK) {
                                console.log('Error:', status);
                            } else {
                                for(i in response.rows){
                                    for(y in response.rows[i].elements){
                                        distanceInfs.distancia +=  response.rows[i].elements[y].distance.value;
                                        distanceInfs.tempo +=  response.rows[i].elements[y].duration.value;
                                    }
                                }
                            }

                            callback(distanceInfs);
                        });
                }
            }
            catch(err){
                console.log(functionName+': '+err.message);
            }
        },
        calcRoute: function(origin,waypoints,destination,callback){

            var distanceInfs    = {
                distancia: 0,
                tempo:0
            }

            if(!waypoints){
                var waypoints = [];
            }

            try{
                if((origin.length > 0) && (destination.length > 0)){

                    var directionsService = new google.maps.DirectionsService();

                    directionsService.route({
                            origin: origin,
                            destination: destination,
                            waypoints: waypoints,
                            travelMode: google.maps.TravelMode.DRIVING,
                            unitSystem: google.maps.UnitSystem.METRIC,
                            optimizeWaypoints: true,
                            provideRouteAlternatives:true
                        },
                        function (response, status) {

                            if (status !== 'OK') {
                                console.log('Error:', status);
                            } else {

                                var routesDistances   = [];

                                // Verifico a rota que tem a menor distância
                                for(var y in response.routes){
                                    var tempDistance = 0;
                                    var tempTime = 0;

                                    for(var i in response.routes[y].legs){
                                        tempDistance +=  response.routes[y].legs[i].distance.value;
                                        tempTime +=  response.routes[y].legs[i].duration.value;
                                    }

                                    routesDistances.push({distancia:tempDistance,tempo:tempTime});
                                }


                                for(var p in routesDistances){

                                    if(p == 0){
                                        distanceInfs.distancia  =  routesDistances[p].distancia;
                                        distanceInfs.tempo      =  routesDistances[p].tempo;
                                    }
                                    else{
                                        if(routesDistances[p].distancia < distanceInfs.distancia){
                                            distanceInfs.distancia  =  routesDistances[p].distancia;
                                            distanceInfs.tempo      =  routesDistances[p].tempo;
                                        }
                                    }

                                }

                                callback(distanceInfs);

                            }

                        });
                }
            }
            catch(err){
                console.log(functionName+': '+err.message);
            }
        }
    }
}
